/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var LT_H = ee.Image("projects/servir-sco-assets/assets/SCO_CA/BZ_MRV/LandTrendr_BZ/CentralAmerica_HighThreshold_DrySeason_19842023_NBR"),
    LT_L = ee.Image("projects/servir-sco-assets/assets/SCO_CA/BZ_MRV/LandTrendr_BZ/CentralAmerica_LowThreshold_DrySeason_19842023_NBR"),
    LT_N = ee.Image("projects/servir-sco-assets/assets/SCO_CA/BZ_MRV/LandTrendr_BZ/CentralAmerica_NeutralThreshold_DrySeason_19842023_NBR"),
    CA = ee.FeatureCollection("projects/servir-sco-assets/assets/SCO_CA/BZ_MRV/aoi_BZ/CentralAmerica"),
    MPR = ee.FeatureCollection("projects/servir-sco-assets/assets/SCO_CA/BZ_MRV/aoi_BZ/MountainPineRidge"),
    ForestMask2000 = ee.Image("projects/servir-sco-assets/assets/SCO_CA/BZ_MRV/ForestMask_BZ/Forest2000_CA"),
    ForestMask2020 = ee.Image("projects/servir-sco-assets/assets/SCO_CA/BZ_MRV/ForestMask_BZ/Forest2020_CA");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Set the map & ROI
// var roi = ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017").filter(ee.Filter.inList('country_na', ['Belize']));
// var roi = ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017").filter(ee.Filter.inList('country_na', ['Guatemala']));
// var roi = ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017").filter(ee.Filter.inList('country_na', ['El Salvador']));
// var roi = ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017").filter(ee.Filter.inList('country_na', ['Costa Rica']));
// var roi = ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017").filter(ee.Filter.inList('country_na', ['Panama']));
// var roi = ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017").filter(ee.Filter.inList('country_na', ['Honduras']));
var roi = ee.FeatureCollection('projects/servir-sco-assets/assets/SCO_CA/BZ_MRV/aoi_BZ/CentralAmerica');
var bz_bmp_mpr = /* color: #ff1806 */ee.Geometry.Polygon(
        [[[-89.05862015218591, 17.278416007090847],
          [-89.05862015218591, 16.845176431155156],
          [-88.73109024495935, 16.845176431155156],
          [-88.73109024495935, 17.278416007090847]]], null, false);
var outlineROI = ee.Image().byte().paint({featureCollection:roi,width:2});
var outlinePineRidge = ee.Image().byte().paint({featureCollection:bz_bmp_mpr,width:3});
Map.setOptions('satellite');
Map.centerObject(bz_bmp_mpr, 10);
Map.addLayer(outlineROI,{palette: "black"},'ROI', true);

// set visualization dictionaries; match what was used in the "Greatest Disturbance Mapping" scipt
var startYear = 1984;
var endYear = 2023;

var palette = ['#9400D3', '#4B0082', '#0000FF', '#00FF00', '#FFFF00', '#FF7F00', '#FF0000'];
var yodVizParms = {
  min: startYear,
  max: endYear,
  palette: palette
};

var magVizParms = {
  min: 200,
  max: 800,
  palette: palette
};


// Apply Forest masks to determine forest degredation or deforestation
// replace "Low30" with your assetID that you imported
var LT_output = LT_H.select(['yod']);
Map.addLayer(LT_output.clip(roi), yodVizParms, 'LT yod output');

// Apply a 2000 forest mask to mask out any pixels that were not defined as forest in 2000
var Forest2000 = LT_output.mask(ForestMask2000);
var Forest2000Masked = LT_output.updateMask(Forest2000);

Map.addLayer(ForestMask2000.clip(roi), {}, ' Forest 2000');
Map.addLayer(Forest2000Masked.clip(roi), yodVizParms, ' masked LT');

// Apply 2020 forest mask to determine which pixels were degedated or deforested
var Forest2020 = Forest2000Masked.mask(ForestMask2020);
var Forest2020Masked = Forest2000Masked.updateMask(Forest2020);

Map.addLayer(ForestMask2020.clip(roi), {}, ' Forest 2020');
Map.addLayer(Forest2020Masked.clip(roi), {palette:['orange']}, ' degredation');
// use unmask to fill in the null values of the 2020 forest mask to obtain nonforest regions

var Unmask = ForestMask2020.unmask(0).clip(roi);
var NonForest = Unmask.eq(0);
var NonForest2020 = Unmask.updateMask(NonForest)
Map.addLayer(NonForest2020, {palette:['white']}, ' NonForest 2020');

var NonForest2020 = Forest2000Masked.mask(NonForest);
var NonForest2020Masked = Forest2000Masked.updateMask(NonForest2020);

Map.addLayer(NonForest2020Masked.clip(roi), {palette:['red']}, 'deforestation');


// Quanitfy the changes
var forest_deg= ui.Chart.image.histogram({image: Forest2020Masked.clip(roi),
                                          region: roi,
                                          scale: 100,
                                          // maxBuckets: 100,
                                          // minBucketWidth: 50,
                                          // maxRaw: 500,
                                          maxPixels: 1e13})
                                          .setSeriesNames(['Area (ha.)'])
                                          .setOptions({title: 'Forest Degredation', 
                                          hAxis: {title: 'Binary Classification'}, 
                                          vAxis: {title: 'Area (hectares)'}}); 
print(forest_deg);

var forest_def= ui.Chart.image.histogram({image: NonForest2020Masked.clip(roi),
                                          region: roi,
                                          scale: 100,
                                          // maxBuckets: 100,
                                          // minBucketWidth: 50,
                                          // maxRaw: 500,
                                          maxPixels: 1e13})
                                          .setSeriesNames(['Area (ha.)'])
                                          .setOptions({title: 'Forest Deforestation', 
                                          hAxis: {title: 'Binary Classification'}, 
                                          vAxis: {title: 'Area (hectares)'}}); 
print(forest_def);


