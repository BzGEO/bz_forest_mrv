// Extract forest cover data for Belize for 2023 using Supervised Machine Learning
// Orig.: https://code.earthengine.google.com/?scriptPath=users%2Fbzgeo%2Fbz_lcc%3A2d_classif_2023%2Fbz_l9_s2_mod_20230608e_classif_rf_comparison
// Questions? Contact eac0021@uah.edu or emil.cherrington@nasa.gov
// Last updated: 03.08.2024

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Load required packages
var a = require('users/servirbz/bz_mrv:x_workshop_202408/00_training_data_2023'); // loads training data for classifications
var b = require('users/bzgeo/examples:_ancillary/mes'); // Loads various ancillary datasets
var c = require('users/servirbz/packages:img_list_landsat_sma_fc__bz'); // Loads LandTrendr-generated mosaics of BZ from 1984-2024

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Define regions of interest (ROIs) -> interchangeable w/ areas of interest (AOIs)
var roi = ee.Geometry.Polygon([[[-87.68, 19.289437],[-87.68, 15.585054],[-89.991352, 15.585054],[-89.991352, 19.289437]]]); // BZ bounding box ROI
var roi2 = ee.FeatureCollection("users/servirbz/aoi/lac/cam/bz/bz_bounds_swbd00"); // Belize shapefile ROI

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Load Landsat image collections -> merges the Landsat-8 and Landsat-9 data into a single collection
var coll_l8_l9 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').merge(ee.ImageCollection('LANDSAT/LC09/C02/T1_L2'));

// Functions: Cloud mask and scale factors
function applyScaleFactors(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2).multiply(10000);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true).addBands(thermalBands, null, true)
              .updateMask(qaMask).updateMask(saturationMask)
              .select(['SR_B2','SR_B3','SR_B4','SR_B5','SR_B6','SR_B7'],['B1','B2','B3','B4','B5','B7']);}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Extract three versions of the Landsat mosaic

// Generate Landsat mosaics by applying cloud masking and scaling functions

// Extract Landsat mosaic for a specific date
var l8_l9_2024a = coll_l8_l9.filterDate("2024-03-22T00:00","2024-03-22T23:59").map(applyScaleFactors).median().toInt16().clip(roi);

// Extract Landsat mosaic for the 2024 dry season
var l8_l9_2024b = coll_l8_l9.filterDate("2024-01-01","2024-05-31").map(applyScaleFactors).median().toInt16().clip(roi);


// Extract LandTrendr-generated Landsat mosaic for 2024 dry season
var l8_l9_2024c = c.img_raw[2024];

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Combine three versions of Landsat mosaics

// Original bands
var fro =  ['B1','B2','B3','B4','B5','B7']; // Blue, Green, Red, NIR, SWIR1, SWIR2

// New band names
var to_v1 = ['B1_V1','B2_V1','B3_V1','B4_V1','B5_V1','B7_V1'];
var to_v2 = ['B1_V2','B2_V2','B3_V2','B4_V2','B5_V2','B7_V2'];
var to_v3 = ['B1_V3','B2_V3','B3_V3','B4_V3','B5_V3','B7_V3'];

// Merge three Landsat mosaics together
var bz_comb = ee.Image.cat([
  l8_l9_2024a.select(fro,to_v1),
  l8_l9_2024b.select(fro,to_v2),
  l8_l9_2024c.select(fro,to_v3).updateMask(l8_l9_2024c.gte(0))]).clip(roi2);

// Extract only bands 3 (red) and 4 (NIR) for histogram display ->

var bz_comb_b3 = bz_comb.select(['B3_V1','B3_V2','B3_V3']);
var bz_comb_b4 = bz_comb.select(['B4_V1','B4_V2','B4_V3']);
var bz_comb_b3_b4 = bz_comb.select(['B3_V1','B3_V2','B3_V3','B4_V1','B4_V2','B4_V3']);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Implement supervised Random Forest classifications -> use 200 trees in all cases

// 
var class_2024a = l8_l9_2024a.classify(ee.Classifier.smileRandomForest(200)
                            .train({features:l8_l9_2024a
                            .sampleRegions({collection:a.training_2023,properties:['class'],scale:100}),classProperty:'class',}));

// 
var class_2024b = l8_l9_2024b.classify(ee.Classifier.smileRandomForest(200)
                            .train({features:l8_l9_2024b
                            .sampleRegions({collection:a.training_2023,properties:['class'],scale:100}),classProperty:'class',}));

// 
var class_2024c = l8_l9_2024c.classify(ee.Classifier.smileRandomForest(200)
                            .train({features:l8_l9_2024c
                            .sampleRegions({collection:a.training_2023,properties:['class'],scale:100}),classProperty:'class',}));
                            
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Display spectral signatures derived from the training polygons

// Define colors to be used for the display of the spectral signatures
var classes = {0: {color: "green"}, 1: {color: "limegreen"}, 2: {color: "teal"},
            3: {color: "olive"}, 4: {color: "magenta"}, 5: {color: "yellow"},
            6: {color: "orange"}, 7: {color: "aqua"}, 8: {color: "blue"}, 9: {color: "red"},};

var classes2 = {0:{color:"green"},1:{color:"limegreen"},2:{color: "teal"},3:{color:"olive"},4:{color:"magenta"},5:{color: "yellow"},6:{color:"orange"},7:{color:"aqua"},8:{color:"red"},};

// Landsat, v1
print(ui.Chart.image.regions(
    l8_l9_2024a.divide(100), a.training_2023, ee.Reducer.mean(), 100, 'label', a.wl).setChartType('LineChart')
    .setOptions({title: 'Spectral reflectance - Landsat (v1) - 100m',
          vAxis: {title: '% Reflectance'}, hAxis: {title: 'Wavelength (μm)'}, lineWidth: 1, pointSize: 4, series: classes}));

// Landsat, v2
print(ui.Chart.image.regions(
    l8_l9_2024b.divide(100), a.training_2023, ee.Reducer.mean(), 100, 'label', a.wl).setChartType('LineChart')
    .setOptions({title: 'Spectral reflectance - Landsat (v2) - 100m',
          vAxis: {title: '% Reflectance'}, hAxis: {title: 'Wavelength (μm)'}, lineWidth: 1, pointSize: 4, series: classes}));

// Landsat, v3 (w/o water)
print(ui.Chart.image.regions(
    l8_l9_2024c.divide(100), a.training_2023.filter(ee.Filter.neq('class', 9)), ee.Reducer.mean(), 100, 'label', a.wl).setChartType('LineChart')
    .setOptions({title: 'Spectral reflectance - Landsat (v3) - 100m',
          vAxis: {title: '% Reflectance'}, hAxis: {title: 'Wavelength (μm)'}, lineWidth: 1, pointSize: 4, series: classes2}));

// Landsat, v3 (w/ water)
print(ui.Chart.image.regions(
    l8_l9_2024c.divide(100), a.training_2023, ee.Reducer.mean(), 100, 'label', a.wl).setChartType('LineChart')
    .setOptions({title: 'Spectral reflectance - Landsat (v3) - 100m',
          vAxis: {title: '% Reflectance'}, hAxis: {title: 'Wavelength (μm)'}, lineWidth: 1, pointSize: 4, series: classes}));


// Display image histograms for three versions of Landsat data (resampled to 500m resolution for speed of calculation)
print(ui.Chart.image.histogram(bz_comb_b3, roi2, 500));
print(ui.Chart.image.histogram(bz_comb_b4, roi2, 500));
print(ui.Chart.image.histogram(bz_comb_b3_b4, roi2, 500));

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Reclass generated land cover data to forest cover data
var for_l9a = class_2024a.remap([1,2,3,4,5,6,7,8,9,10],[1,1,1,2,2,2,2,2,2,2]).select(['remapped'],['classification']);
var for_l9b = class_2024b.remap([1,2,3,4,5,6,7,8,9,10],[1,1,1,2,2,2,2,2,2,2]).select(['remapped'],['classification']);
var for_l9c = class_2024c.remap([1,2,3,4,5,6,7,8,9,10],[1,1,1,2,2,2,2,2,2,2]).select(['remapped'],['classification']);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Estimate forest area and % forest cover

// Define function for extracting forest cover statistics and printing those statistics in the Console on the right ->

function fstat(img,res,aoi,year) {
// NOTE: For this function to work, we need to supply the forest cover map, the spatial resolution, AOI, and the analysis year.

// Extract area for use in % forest cover calculations below
var area_bz = ee.Number(ee.FeatureCollection(a.bz).geometry().area().divide(1000000)); // Area of Belize = 22,230 km2

// Extract forest area
var f_stat = ee.Number(img.clip(aoi).select('classification').eq(1).multiply(ee.Image.pixelArea()).reduceRegion({
  geometry: aoi.geometry(), reducer: ee.Reducer.sum(), scale: res, maxPixels: 1e18}).get('classification')).divide(1000000);

// Extract non-forest area
var nf_stat = ee.Number(img.clip(aoi).select('classification').eq(2).multiply(ee.Image.pixelArea()).reduceRegion({
  geometry: aoi.geometry(), reducer: ee.Reducer.sum(), scale: res, maxPixels: 1e18}).get('classification')).divide(1000000);

// Select which statistics are printed out
print('Year: ', year); // This prints the analysis year (defined by the operator)
print('est. forest area: ', f_stat, 'sq. km'); // This prints the forest cover extent in square kilometers
print('est. % forest cover: ', f_stat.divide(area_bz).multiply(100),'percent'); // This prints the forest cover extent in percent
//print('est. % non-forest cover: ', nf_stat.divide(roi).multiply(100),'percent'); // This prints the non-forest cover extent in percent
}

// Extract forest cover statistics for 2023 using previously defined function

print("Landsat-based classification");
print("v1: specific date");

fstat(class_2024a.reproject({crs: 'EPSG: 32616', scale: 100})
                   .reduceResolution({reducer: ee.Reducer.mode(), maxPixels: 10000, bestEffort: true}),
                   100, a.bz, 2024);

print("Landsat-based classification");
print("v2: seasonal mosaic");

fstat(class_2024b.reproject({crs: 'EPSG: 32616', scale: 100})
                   .reduceResolution({reducer: ee.Reducer.mode(), maxPixels: 10000, bestEffort: true}),
                   100, a.bz, 2024);

print("Landsat-based classification");
print("v3: seasonal mosaic, LT-derived");

fstat(class_2024c.reproject({crs: 'EPSG: 32616', scale: 100})
                   .reduceResolution({reducer: ee.Reducer.mode(), maxPixels: 10000, bestEffort: true}),
                   100, a.bz, 2024);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Define parameters for visualizing the data in the map viewer below

// Landsat visualization palettes
// var viz_543 = {bands: ['B5','B4','B3'],min: 0, max: 4500}; // This is a simple visualization palette
var viz_543 = {bands: ['B5','B4','B3'], min: [730, 1800, -740], max:[2200, 3800, 2000]}; // This palette applies a nice histogram stretch

// Forest cover palette (two colors)
var pal_fc = {min:0,max:1,palette:['salmon','green']};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Add data to the map viewer below

Map.setCenter(-88.4608, 17.5117, 9);
Map.setOptions('SATELLITE');

// Load Landsat mosaics used for the classification
Map.addLayer(l8_l9_2024a, a.viz_543, 'Landsat_dry_2024_v1', true);
Map.addLayer(l8_l9_2024b, a.viz_543, 'Landsat_dry_2024_v2', false);
Map.addLayer(l8_l9_2024c, a.viz_543, 'Landsat_dry_2024_v3', false);

// Load classification results
Map.addLayer(class_2024a, a.pal10cl, 'LC_Landsat_dry_2024_v1', false);
Map.addLayer(class_2024b, a.pal10cl, 'LC_Landsat_dry_2024_v2', false);
Map.addLayer(class_2024c, a.pal10cl, 'LC_Landsat_dry_2024_v3', false);

// Load ancillary reference datasets
Map.addLayer(b.bz_ws_ln.clip(b.roi_bz_),{palette: "blue"},"Watersheds (mainland)", false);
Map.addLayer(b.bz_dist_ln2.clip(b.roi_bz),{palette: "white"},"District boundaries", false);
Map.addLayer(b.pa_bz_ln.clip(b.roi_bz),{palette: "yellow"},"Prot. areas", true);
Map.addLayer(b.bnds_intl_ln2.clip(b.roi_bz),{palette: "white"},"Int'l boundaries", true);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////